name: Deploy to AWS Lightsail

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm install

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Decode SSH Private Key
        id: decode-key
        run: |
          echo "${{ secrets.LIGHTSAIL_SSH_KEY }}" | base64 --decode > decoded_key
          echo "DECODED_KEY<<EOF" >> $GITHUB_ENV
          cat decoded_key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ env.DECODED_KEY }}

      - name: Deploy to Lightsail
        env:
          ALLOWED_HOSTS: ${{ secrets.BACKEND_ALLOWED_HOSTS }}
          SECRET_KEY: ${{ secrets.BACKEND_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.BACKEND_DATABASE_URL }}
          CELERY_BROKER_URL: ${{ secrets.BACKEND_CELERY_BROKER_URL }}
          FRONTEND_API_URL: ${{ secrets.FRONTEND_API_URL }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.LIGHTSAIL_IP }} << EOF
            set -x
            cd /home/ubuntu/veredict
          
            # Force reset and pull latest code
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            git pull origin main --force
            
            echo "Setting environment variables..."
            export SECRET_KEY="${SECRET_KEY}"
            export ALLOWED_HOSTS="${ALLOWED_HOSTS}"
            export DATABASE_URL="${DATABASE_URL}"
            export CELERY_BROKER_URL="${CELERY_BROKER_URL}"
            export FRONTEND_API_URL="${FRONTEND_API_URL}"
            export AWS_REGION="${AWS_REGION}"
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_STORAGE_BUCKET_NAME="${AWS_STORAGE_BUCKET_NAME}"
            export NEXT_PUBLIC_API_URL="${NEXT_PUBLIC_API_URL}"
          
            echo "Writing backend environment file..."
            > backend/.env.prod
            
            # Append environment variables
            echo "DEBUG=False" >> backend/.env.prod
            echo "SECRET_KEY=$SECRET_KEY" >> backend/.env.prod
            echo "ALLOWED_HOSTS=$ALLOWED_HOSTS" >> backend/.env.prod
            echo "DATABASE_URL=$DATABASE_URL" >> backend/.env.prod
            echo "CELERY_BROKER_URL=$CELERY_BROKER_URL" >> backend/.env.prod
            echo "USE_S3=True" >> backend/.env.prod
            echo "AWS_REGION=AWS_REGION" >> backend/.env.prod
            echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> backend/.env.prod
            echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> backend/.env.prod
            echo "AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME" >> backend/.env.prod
          
            echo "Writing frontend environment file..."
            > frontend/.env.production
            echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" >> frontend/.env.production
            
            echo "Restarting services with Docker Compose..."
            docker-compose -f compose.prod.yml down --remove-orphans
            docker system prune -af
            docker-compose -f compose.prod.yml up -d
          
            echo "Running database migrations..."
            docker-compose -f compose.prod.yml run backend python manage.py migrate
            
            echo "Collecting static files..."
            docker-compose -f compose.prod.yml run backend python manage.py collectstatic --noinput
          
          EOF